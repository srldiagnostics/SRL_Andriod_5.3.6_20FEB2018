package com.srllimited.srl;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.srllimited.srl.adapters.OrdersAdapter;
import com.srllimited.srl.data.OrdersHistoryData;
import com.srllimited.srl.data.ServerResponseData;
import com.srllimited.srl.database.OrderDatabase;
import com.srllimited.srl.serverapis.ApiRequest;
import com.srllimited.srl.serverapis.ApiRequestHelper;
import com.srllimited.srl.serverapis.ApiRequestManager;
import com.srllimited.srl.serverapis.ApiResponseListener;
import com.srllimited.srl.util.Log;
import com.srllimited.srl.util.Util;
import com.srllimited.srl.util.Validate;
import com.srllimited.srl.widget.UISearchBar;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Created by Ruchi Tiwari on 12/13/2016.
 */

public class OrdersActivity extends MenuBaseActivity implements View.OnClickListener
{
	private static final String TAG = "OrdersActivity";

	public static Activity orders;
	final List<OrdersHistoryData> mLabData = new ArrayList<>();
	Button loginwithUserIDBTNID, viewreportWithFirstNameBTNID, viewreportWithMobileNoBTNID;
	Context context;
	TextView mHeader_name;
	List<OrdersHistoryData> mOrdersHistoryDatas = new ArrayList<>();
	List<OrdersHistoryData> mLabFilteredData = new ArrayList<>();
	OrderDatabase orderDB;
	RecyclerView.Adapter mAdapter;
	UISearchBar.OnSearchListener mSearchLister = new UISearchBar.OnSearchListener()
	{
		@Override
		public void onClearSearch()
		{
			loadDefaultData();
		}

		@Override
		public void onSearchText(String text)
		{
			mLabFilteredData.clear();
			if (Validate.notEmpty(text))
			{
				for (OrdersHistoryData data : mOrdersHistoryDatas)

				{
					if (text.length() > 0)
					{
						if (isSearchData(data.getORDERNO(), text))
						{
							mLabFilteredData.add(data);
						}
					}
				}

				setData();
			}
			else
			{
				loadDefaultData();
			}

		}
	};
	private UISearchBar mSearchView;
	private RecyclerView mRecyclerView;
	private JSONArray array = null;
	private ApiResponseListener<ServerResponseData> mResponseListener = new ApiResponseListener<ServerResponseData>()
	{
		@Override
		public void onResponse(final ApiRequest request, final ServerResponseData serverResponseData)
		{
			switch (request.getReferralCode())
			{
				case ORDERS:
				{

					JSONObject jsonObject =	 serverResponseData.getObjectData();
					try
					{
						if (jsonObject != null)
							array = jsonObject.getJSONArray("ORDER");
					}
					catch (Exception e)
					{

					}
					new AsyncTaskRunner().execute();
				}
					break;
			}
		}

		@Override
		public void onResponseError(final ApiRequest request, final Exception error)
		{

		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		super.addContentView(R.layout.my_order_list);
		orders = this;
		context = OrdersActivity.this;
		orderDB = new OrderDatabase(getApplicationContext());
		header_loc_name.setText("My Orders");
		header_loc_name.setEnabled(false);
		mSearchView = (UISearchBar) findViewById(R.id.searchView);
		mSearchView.setOnSearchListener(mSearchLister);

		mRecyclerView = (RecyclerView) findViewById(R.id.orders_receyclerview);
		mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
		mRecyclerView.setHasFixedSize(true);
		mAdapter = new OrdersAdapter(context, mOrdersHistoryDatas);
		mRecyclerView.setAdapter(mAdapter);

		sendRequest(ApiRequestHelper.getOrders(context, Util.getStoredUsername(context)));
	}

	@Override
	public void onClick(View v)
	{
		int id = v.getId();
		switch (id)
		{
		}
	}

	private void sendRequest(ApiRequest request)
	{
		ApiRequestManager.getInstance().sendRequest(this, request, mResponseListener);
	}

	private void setOrderFromAsync(JSONArray jArray)
	{
		if (Validate.isNull(jArray))
			return;

		mLabData.clear();
		mOrdersHistoryDatas.clear();

		for (int i = 0; i < jArray.length(); i++)
		{
			JSONObject jsonObject = jArray.optJSONObject(i);
			OrdersHistoryData ordersHistoryData = OrdersHistoryData.init(jsonObject);
			if (Validate.notNull(ordersHistoryData))
			{

				String orderNo = ordersHistoryData.getORDERNO();
				if (Validate.notNull(orderDB))
				{

					OrdersHistoryData storedOrdersHistoryData = null;
					try
					{
						storedOrdersHistoryData = orderDB.getOrder_object(orderNo);
					}
					catch (Exception e)
					{
					}

					if (Validate.notNull(storedOrdersHistoryData) && storedOrdersHistoryData.getORDERNO() != null)
					{
						orderDB.updateOrder(ordersHistoryData);
					}
					else
					{
						orderDB.createHeaderData(ordersHistoryData);
					}
				}

				Log.d(TAG, "OrderNo: " + orderNo);

				mOrdersHistoryDatas.add(ordersHistoryData);

			}
		}

		sortByDate();
		mLabData.addAll(mOrdersHistoryDatas);
	}

	//    private void sortByDate() {
	//        Collections.sort(mOrdersHistoryDatas, new Comparator<OrdersHistoryData>() {
	//            @Override
	//            public int compare(OrdersHistoryData o1, OrdersHistoryData o2) {
	//
	//                final long d1 = o1.getENTERED_ON();
	//                final long d2 = o2.getENTERED_ON();
	//                return (d1 > d2) ? -1 : (d1 > d2) ? 1 : 0;
	//
	//
	//            }
	//        });
	//    }

	private void setOrdersAdapter()
	{

		if (Validate.notNull(mOrdersHistoryDatas))
			mAdapter.notifyDataSetChanged();

	}

	private void sortByDate()
	{
		Collections.sort(mOrdersHistoryDatas, new Comparator<OrdersHistoryData>()
		{
			@Override
			public int compare(OrdersHistoryData o1, OrdersHistoryData o2)
			{

				final long d1 = o1.getENTERED_ON();
				final long d2 = o2.getENTERED_ON();
				return Double.compare(d2, d1);

			}
		});

		//        Collections.reverse(mOrdersHistoryDatas);
	}

	private boolean isSearchFirstCharData(String name, String searchTxt)
	{
		return (Validate.notEmpty(name) && name.toLowerCase().charAt(0) == searchTxt.toLowerCase().charAt(0));
	}

	private boolean isSearchData(String name, String searchTxt)
	{
		return (Validate.notEmpty(name) && name.toLowerCase().contains(searchTxt.toLowerCase()));
	}

	private void loadDefaultData()
	{
		mOrdersHistoryDatas.clear();
		for (OrdersHistoryData labLocatorsData : mLabData)
		{
			mOrdersHistoryDatas.add(labLocatorsData);
		}
		sortByDate();
		mAdapter.notifyDataSetChanged();
	}

	private void setData()
	{
		try
		{

			mOrdersHistoryDatas.clear();

			mOrdersHistoryDatas.addAll(mLabFilteredData);

		}
		catch (Exception e)
		{

		}

		sortByDate();
		mAdapter.notifyDataSetChanged();
	}

	@Override
	protected void onDestroy()
	{

		super.onDestroy();
	}

	private class AsyncTaskRunner extends AsyncTask<String, String, String>
	{

		private String resp;

		@Override
		protected String doInBackground(String... params)
		{
			setOrderFromAsync(array);
			return resp;
		}

		@Override
		protected void onPostExecute(String result)
		{

			if (mOrdersHistoryDatas != null)
			{
				sortByDate();
				setOrdersAdapter();
			}
			Util.hideProgressDialog();
		}

		@Override
		protected void onPreExecute()
		{
			Util.hideProgressDialog();
			Util.showProgressDialog(context, "Fetching Orders...");
		}

		@Override
		protected void onProgressUpdate(String... text)
		{

		}
	}
}
